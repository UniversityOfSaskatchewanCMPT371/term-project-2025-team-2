# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "development", "fix/caching" ]
  pull_request:
    branches: [ "main", "development" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:    
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}
      
      - name: Cache node modules
        id: cacheStepnode
        uses: actions/cache@v4
        with:
          # npm cache files are stored with ~/.npm
          path: |
           ~/.npm
           node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-

      #Install dependencies (if no cache hit)
      - name: Install dependencies
        if: steps.cacheStepnode.outputs.cache-hit != 'true'
        run: npm install

      # Run ESLint
      - name: Lint with ESLint
        run: npm run lint
        continue-on-error: false

      - name: Format with prettier
        run: npm run pretty
        continue-on-error: false

      - name: Cache Playwright browsers
        id: cacheStepPlaywright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Install Playwright Browsers
        if: steps.cacheStepPlaywright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      
      - name: Run Unit Tests
        run: npm run test:unit

      - name: Run Integration Tests
        run: npm run test:integration

      #Build project
      - name: Build
        run: npm run build
  
  smoke_test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Cache node modules
      id: cacheStepnode
      uses: actions/cache@v4
      with:
        # npm cache files are stored with ~/.npm
        path: |
         ~/.npm
         node_modules
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-

    #Install dependencies (if no cache hit)
    - name: Install dependencies
      if: steps.cacheStepnode.outputs.cache-hit != 'true'
      run: npm install

    - name: Cache Playwright browsers
      id: cacheStepPlaywright
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          playwright-browsers-${{ runner.os }}-

    - name: Install Playwright Browsers
      if: steps.cacheStepPlaywright.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps

    - name: Run Smoke Test
      run: npm run test:smoke

  #Builds Docker image in ubuntu for nginx
  build_docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build docker image
        run: |
          docker build -f docker/dev/Dockerfile -t dicom-app .

      #Run the container for testing
      - name: Run Docker container
        run: |
          docker run -d -p 80:80 dicom-app
